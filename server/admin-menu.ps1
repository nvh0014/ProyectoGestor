# Scripts de administraci√≥n completos para Gestor App
# Incluye geobloqueo y sistema de contrase√±as

Write-Host "üîß Scripts de Administraci√≥n - Gestor App" -ForegroundColor Cyan
Write-Host "===========================================" -ForegroundColor Cyan

# Funci√≥n para verificar estado del servidor
function Test-ServerStatus {
    Write-Host "`nüìä Verificando estado del servidor..." -ForegroundColor Yellow
    
    try {
        $response = Invoke-RestMethod -Uri "http://localhost:5000/test" -Method GET -TimeoutSec 5
        Write-Host "‚úÖ Servidor funcionando: $($response.message)" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "‚ùå Servidor no responde" -ForegroundColor Red
        return $false
    }
}

# Funci√≥n para verificar geolocalizaci√≥n
function Test-Geolocation {
    Write-Host "`nüåç Verificando sistema de geobloqueo..." -ForegroundColor Yellow
    
    try {
        $response = Invoke-RestMethod -Uri "http://localhost:5000/api/geo-status" -Method GET
        Write-Host "‚úÖ Pa√≠s detectado: $($response.country)" -ForegroundColor Green
        Write-Host "‚úÖ Acceso permitido: $($response.allowed)" -ForegroundColor Green
        Write-Host "‚úÖ Fuente: $($response.source)" -ForegroundColor Green
        if ($response.developmentMode) {
            Write-Host "‚ö†Ô∏è  Modo desarrollo activo" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "‚ùå Error verificando geolocalizaci√≥n" -ForegroundColor Red
    }
}

# Funci√≥n para obtener estad√≠sticas
function Get-AdminStats {
    Write-Host "`nüìà Obteniendo estad√≠sticas..." -ForegroundColor Yellow
    
    try {
        $response = Invoke-RestMethod -Uri "http://localhost:5000/api/geo-admin" -Method GET
        Write-Host "‚úÖ IPs en cache: $($response.cache.totalCachedIPs)" -ForegroundColor Green
        Write-Host "‚úÖ Cache hits: $($response.cache.cacheHits)" -ForegroundColor Green
        Write-Host "‚úÖ Cache misses: $($response.cache.cacheMisses)" -ForegroundColor Green
        Write-Host "‚úÖ Pa√≠ses permitidos: $($response.configuration.allowedCountries -join ', ')" -ForegroundColor Green
        Write-Host "‚úÖ Modo desarrollo: $($response.configuration.developmentMode)" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Error obteniendo estad√≠sticas" -ForegroundColor Red
    }
}

# Funci√≥n para migrar contrase√±as
function Start-PasswordMigration {
    Write-Host "`nüîê Iniciando migraci√≥n de contrase√±as..." -ForegroundColor Yellow
    Write-Host "‚ö†Ô∏è  IMPORTANTE: Aseg√∫rate de tener un backup de la base de datos" -ForegroundColor Red
    
    $confirm = Read-Host "¬øContinuar con la migraci√≥n? (y/N)"
    if ($confirm -ne 'y' -and $confirm -ne 'Y') {
        Write-Host "‚ùå Migraci√≥n cancelada" -ForegroundColor Yellow
        return
    }
    
    try {
        $body = @{ adminKey = "MIGRATE_PASSWORDS_2025" } | ConvertTo-Json
        $response = Invoke-RestMethod -Uri "http://localhost:5000/admin/migrate-passwords" -Method POST -Body $body -ContentType "application/json"
        
        Write-Host "‚úÖ Migraci√≥n completada:" -ForegroundColor Green
        Write-Host "   - Total usuarios: $($response.totalUsers)" -ForegroundColor White
        Write-Host "   - Contrase√±as migradas: $($response.migratedPasswords)" -ForegroundColor White
        Write-Host "   - Errores: $($response.errors)" -ForegroundColor White
        Write-Host "   - Timestamp: $($response.timestamp)" -ForegroundColor White
    } catch {
        Write-Host "‚ùå Error en migraci√≥n: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Funci√≥n para limpiar cache
function Clear-GeoCache {
    Write-Host "`nüßπ Limpiando cache de geolocalizaci√≥n..." -ForegroundColor Yellow
    
    try {
        $response = Invoke-RestMethod -Uri "http://localhost:5000/api/geo-admin/clear-cache" -Method POST -ContentType "application/json"
        Write-Host "‚úÖ $($response.message)" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Error limpiando cache" -ForegroundColor Red
    }
}

# Funci√≥n para iniciar servidor
function Start-ProductionServer {
    Write-Host "`nüöÄ Iniciando servidor en modo producci√≥n..." -ForegroundColor Yellow
    
    Set-Location "c:\Users\Andy\Desktop\Gestor\server"
    $env:NODE_ENV = "production"
    
    Write-Host "‚úÖ Variables configuradas:" -ForegroundColor Green
    Write-Host "   - NODE_ENV: $($env:NODE_ENV)" -ForegroundColor White
    Write-Host "   - Directorio: $(Get-Location)" -ForegroundColor White
    
    Write-Host "`nüî• Iniciando servidor... (Ctrl+C para detener)" -ForegroundColor Cyan
    node server.js
}

# Men√∫ principal
function Show-AdminMenu {
    Write-Host "`nüìã Men√∫ de Administraci√≥n" -ForegroundColor Cyan
    Write-Host "=========================" -ForegroundColor Cyan
    Write-Host "1. Verificar estado del servidor" -ForegroundColor White
    Write-Host "2. Verificar geolocalizaci√≥n" -ForegroundColor White
    Write-Host "3. Obtener estad√≠sticas" -ForegroundColor White
    Write-Host "4. Migrar contrase√±as (solo una vez)" -ForegroundColor White
    Write-Host "5. Limpiar cache de geolocalizaci√≥n" -ForegroundColor White
    Write-Host "6. Iniciar servidor en producci√≥n" -ForegroundColor White
    Write-Host "0. Salir" -ForegroundColor White
    Write-Host ""
    
    $choice = Read-Host "Selecciona una opci√≥n"
    
    switch ($choice) {
        "1" { Test-ServerStatus }
        "2" { Test-Geolocation }
        "3" { Get-AdminStats }
        "4" { Start-PasswordMigration }
        "5" { Clear-GeoCache }
        "6" { Start-ProductionServer }
        "0" { 
            Write-Host "`nüëã ¬°Hasta luego!" -ForegroundColor Green
            return 
        }
        default { 
            Write-Host "`n‚ùå Opci√≥n no v√°lida" -ForegroundColor Red
            Show-AdminMenu
        }
    }
    
    if ($choice -ne "0" -and $choice -ne "6") {
        Read-Host "`nPresiona Enter para continuar"
        Show-AdminMenu
    }
}

# Ejecutar men√∫ principal
Show-AdminMenu
